export class StockFundamentalsModel {
    constructor(data: any) {
        this.symbol = data.Symbol;
        this.description = data.Description;
        this.cik = data.CIK;
        this.exchange = data.Exchange;
        this.currency = data.Currency;
        this.country = data.Country;
        this.sector = data.Sector;
        this.industry = data.Industry;
        this.fiscalYearEnd = data.FiscalYearEnd;
        this.latestQuarter = new Date(data.LatestQuarter);
        this.marketCapitalization = Number(data.MarketCapitalization);
        this.ebitda = Number(data.EBITDA);
        this.peRatio = Number(data.PERatio);
        this.peGRatio = Number(data.PEGRatio);
        this.bookValue = Number(data.BookValue);
        this.dividendPerShare = Number(data.DividendPerShare);
        this.dividendYield = Number(data.DividendYield);
        this.eps = Number(data.EPS);
        this.revenuePerShareTTM = Number(data.RevenuePerShareTTM);
        this.profitMargin = Number(data.ProfitMargin);
        this.operatingMarginTTM = Number(data.OperatingMarginTTM);
        this.returnOnAssetsTTM = Number(data.ReturnOnAssetsTTM);
        this.returnOnEquityTTM = Number(data.ReturnOnEquityTTM);
        this.revenueTTM = Number(data.RevenueTTM);
        this.grossProfitTTM = Number(data.GrossProfitTTM);
        this.dilutedEPSTTM = Number(data.DilutedEPSTTM);
        this.quarterlyEarningsGrowthYOY = Number(data.QuarterlyEarningsGrowthYOY);
        this.quarterlyRevenueGrowthYOY = Number(data.QuarterlyRevenueGrowthYOY);
        this.trailingPE = Number(data.TrailingPE);
        this.forwardPE = Number(data.ForwardPE);
        this.priceToSalesRatioTTM = Number(data.PriceToSalesRatioTTM);
        this.priceToBookRatio = Number(data.PriceToBookRatio);
        this.evToRevenue = Number(data.EVToRevenue);
        this.evToEBITDA = Number(data.EVToEBITDA);
        this.beta = Number(data.Beta);
        this.weekHigh52 = Number(data["52WeekHigh"]);
        this.weekLow52 = Number(data["52WeekLow"]);
        this.dayMovingAverage50 = Number(data["50DayMovingAverage"]);
        this.dayMovingAverage200 = Number(data["200DayMovingAverage"]);
        this.sharesOutstanding = Number(data.SharesOutstanding);
        this.dividendDate = new Date(data.DividendDate);
        this.exDividendDate = new Date(data.ExDividendDate);
    }

    symbol: string;
    description: string;
    cik: string;
    exchange: string;
    currency: string;
    country: string;
    sector: string;
    industry: string;
    fiscalYearEnd: string;
    latestQuarter: Date;
    marketCapitalization: number;
    ebitda: number;
    peRatio: number;
    peGRatio: number;
    bookValue: number;
    dividendPerShare: number;
    dividendYield: number;
    eps: number;
    revenuePerShareTTM: number;
    profitMargin: number;
    operatingMarginTTM: number;
    returnOnAssetsTTM: number;
    returnOnEquityTTM: number;
    revenueTTM: number;
    grossProfitTTM: number;
    dilutedEPSTTM: number;
    quarterlyEarningsGrowthYOY: number;
    quarterlyRevenueGrowthYOY: number;
    trailingPE: number;
    forwardPE: number;
    priceToSalesRatioTTM: number;
    priceToBookRatio: number;
    evToRevenue: number;
    evToEBITDA: number;
    beta: number;
    weekHigh52: number;
    weekLow52: number;
    dayMovingAverage50: number;
    dayMovingAverage200: number;
    sharesOutstanding: number;
    dividendDate: Date;
    exDividendDate: Date;
}
